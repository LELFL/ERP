//#region 程序集 Microsoft.EntityFrameworkCore, Version=9.0.4.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
//// C:\Users\11413\.nuget\packages\microsoft.entityframeworkcore\9.0.4\lib\net8.0\Microsoft.EntityFrameworkCore.dll
//// Decompiled with ICSharpCode.Decompiler 8.1.1.7464
//#endregion

//using System;
//using System.Collections;
//using System.Collections.Generic;
//using System.Diagnostics.CodeAnalysis;
//using System.Linq;
//using System.Linq.Expressions;
//using System.Reflection;
//using System.Runtime.CompilerServices;
//using System.Threading;
//using System.Threading.Tasks;
//using Microsoft.EntityFrameworkCore.Diagnostics;
//using Microsoft.EntityFrameworkCore.Query;
//using Microsoft.EntityFrameworkCore.Query.Internal;
//using Microsoft.EntityFrameworkCore.Utilities;

//namespace Microsoft.EntityFrameworkCore;

////
//// 摘要:
////     Entity Framework LINQ related extension methods.
////[UnconditionalSuppressMessage("ReflectionAnalysis", "IL2060", Justification = "MakeGenericMethod is used in this class to create MethodCallExpression nodes, but only if the method in question is called from user code - so it's never trimmed. After https://github.com/dotnet/linker/issues/2482 is fixed, the suppression will no longer be necessary.")]
////public static class EntityFrameworkQueryableExtensions
////{
////    private sealed class IncludableQueryable<TEntity, TProperty> : IIncludableQueryable<TEntity, TProperty>, IQueryable<TEntity>, IEnumerable<TEntity>, IEnumerable, IQueryable, IAsyncEnumerable<TEntity>
////    {
////        [CompilerGenerated]
////        private IQueryable<TEntity> _003Cqueryable_003EP;

////        public Expression Expression => _003Cqueryable_003EP.Expression;

////        public Type ElementType => _003Cqueryable_003EP.ElementType;

////        public IQueryProvider Provider => _003Cqueryable_003EP.Provider;

////        public IncludableQueryable(IQueryable<TEntity> queryable)
////        {
////            _003Cqueryable_003EP = queryable;
////            base._002Ector();
////        }

////        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default(CancellationToken))
////        {
////            return ((IAsyncEnumerable<TEntity>)_003Cqueryable_003EP).GetAsyncEnumerator(cancellationToken);
////        }

////        public IEnumerator<TEntity> GetEnumerator()
////        {
////            return _003Cqueryable_003EP.GetEnumerator();
////        }

////        IEnumerator IEnumerable.GetEnumerator()
////        {
////            return GetEnumerator();
////        }
////    }

////    //
////    // 摘要:
////    //     Generates a string representation of the query used. This string may not be suitable
////    //     for direct execution and is intended only for use in debugging.
////    //
////    // 参数:
////    //   source:
////    //     The query source.
////    //
////    // 返回结果:
////    //     The query string for debugging.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    // 言论：
////    //     This method is only typically supported by queries generated by Entity Framework
////    //     Core.
////    //
////    //     See Viewing SQL generated by EF Core for more information and examples.
////    public static string ToQueryString(this IQueryable source)
////    {
////        if (!(source.Provider.Execute<IEnumerable>(source.Expression) is IQueryingEnumerable queryingEnumerable))
////        {
////            return CoreStrings.NotQueryingEnumerable;
////        }

////        return queryingEnumerable.ToQueryString();
////    }

////    //
////    // 摘要:
////    //     Asynchronously determines whether a sequence contains any elements.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to check for being empty.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains true
////    //     if the source sequence contains any elements; otherwise, false.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<TSource, Task<bool>>(QueryableMethods.AnyWithoutPredicate, source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously determines whether any element of a sequence satisfies a condition.
////    //
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 whose elements to test for a condition.
////    //
////    //   predicate:
////    //     A function to test each element for a condition.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains true
////    //     if any elements in the source sequence pass the test in the specified predicate;
////    //     otherwise, false.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or predicate is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(predicate, "predicate");
////        return ExecuteAsync<TSource, Task<bool>>(QueryableMethods.AnyWithPredicate, source, predicate, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously determines whether all the elements of a sequence satisfy a condition.
////    //
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 whose elements to test for a condition.
////    //
////    //   predicate:
////    //     A function to test each element for a condition.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains true
////    //     if every element of the source sequence passes the test in the specified predicate;
////    //     otherwise, false.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or predicate is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<bool> AllAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(predicate, "predicate");
////        return ExecuteAsync<TSource, Task<bool>>(QueryableMethods.All, source, predicate, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the number of elements in a sequence.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 that contains the elements to be counted.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     number of elements in the input sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<TSource, Task<int>>(QueryableMethods.CountWithoutPredicate, source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the number of elements in a sequence that satisfy a condition.
////    //
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 that contains the elements to be counted.
////    //
////    //   predicate:
////    //     A function to test each element for a condition.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     number of elements in the sequence that satisfy the condition in the predicate
////    //     function.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or predicate is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(predicate, "predicate");
////        return ExecuteAsync<TSource, Task<int>>(QueryableMethods.CountWithPredicate, source, predicate, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns a System.Int64 that represents the total number of elements
////    //     in a sequence.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 that contains the elements to be counted.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     number of elements in the input sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<TSource, Task<long>>(QueryableMethods.LongCountWithoutPredicate, source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns a System.Int64 that represents the number of elements
////    //     in a sequence that satisfy a condition.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 that contains the elements to be counted.
////    //
////    //   predicate:
////    //     A function to test each element for a condition.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     number of elements in the sequence that satisfy the condition in the predicate
////    //     function.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or predicate is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(predicate, "predicate");
////        return ExecuteAsync<TSource, Task<long>>(QueryableMethods.LongCountWithPredicate, source, predicate, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the element at a specified index in a sequence.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the element from.
////    //
////    //   index:
////    //     The zero-based index of the element to retrieve.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     element at a specified index in a source sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.ArgumentOutOfRangeException:
////    //     index is less than zero.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource> ElementAtAsync<TSource>(this IQueryable<TSource> source, int index, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(index, "index");
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.ElementAt, source, Expression.Constant(index), cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the element at a specified index in a sequence, or a default
////    //     value if the index is out of range.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the element from.
////    //
////    //   index:
////    //     The zero-based index of the element to retrieve.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     element at a specified index in a source sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource> ElementAtOrDefaultAsync<TSource>(this IQueryable<TSource> source, int index, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(index, "index");
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.ElementAtOrDefault, source, Expression.Constant(index), cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the first element of a sequence.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the first element of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     first element in source.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.FirstWithoutPredicate, source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the first element of a sequence that satisfies a specified
////    //     condition.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the first element of.
////    //
////    //   predicate:
////    //     A function to test each element for a condition.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     first element in source that passes the test in predicate.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or predicate is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     No element satisfies the condition in predicate
////    //
////    //     -or -
////    //
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(predicate, "predicate");
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.FirstWithPredicate, source, predicate, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the first element of a sequence, or a default value if
////    //     the sequence contains no elements.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the first element of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains default
////    //     ( TSource ) if source is empty; otherwise, the first element in source.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource?> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.FirstOrDefaultWithoutPredicate, source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the first element of a sequence that satisfies a specified
////    //     condition or a default value if no such element is found.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the first element of.
////    //
////    //   predicate:
////    //     A function to test each element for a condition.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains default
////    //     ( TSource ) if source is empty or if no element passes the test specified by
////    //     predicate, otherwise, the first element in source that passes the test specified
////    //     by predicate.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or predicate is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource?> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(predicate, "predicate");
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.FirstOrDefaultWithPredicate, source, predicate, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the last element of a sequence.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the last element of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     last element in source.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource> LastAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.LastWithoutPredicate, source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the last element of a sequence that satisfies a specified
////    //     condition.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the last element of.
////    //
////    //   predicate:
////    //     A function to test each element for a condition.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     last element in source that passes the test in predicate.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or predicate is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     No element satisfies the condition in predicate.
////    //
////    //     -or-
////    //
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource> LastAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(predicate, "predicate");
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.LastWithPredicate, source, predicate, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the last element of a sequence, or a default value if
////    //     the sequence contains no elements.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the last element of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains default
////    //     ( TSource ) if source is empty; otherwise, the last element in source.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource?> LastOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.LastOrDefaultWithoutPredicate, source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the last element of a sequence that satisfies a specified
////    //     condition or a default value if no such element is found.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the last element of.
////    //
////    //   predicate:
////    //     A function to test each element for a condition.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains default
////    //     ( TSource ) if source is empty or if no element passes the test specified by
////    //     predicate, otherwise, the last element in source that passes the test specified
////    //     by predicate.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or predicate is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource?> LastOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(predicate, "predicate");
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.LastOrDefaultWithPredicate, source, predicate, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the only element of a sequence, and throws an exception
////    //     if there is not exactly one element in the sequence.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the single element of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     single element of the input sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains more than one elements.
////    //
////    //     -or-
////    //
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.SingleWithoutPredicate, source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the only element of a sequence that satisfies a specified
////    //     condition, and throws an exception if more than one such element exists.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the single element of.
////    //
////    //   predicate:
////    //     A function to test an element for a condition.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     single element of the input sequence that satisfies the condition in predicate.
////    //
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or predicate is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     No element satisfies the condition in predicate.
////    //
////    //     -or-
////    //
////    //     More than one element satisfies the condition in predicate.
////    //
////    //     -or-
////    //
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(predicate, "predicate");
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.SingleWithPredicate, source, predicate, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the only element of a sequence, or a default value if
////    //     the sequence is empty; this method throws an exception if there is more than
////    //     one element in the sequence.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the single element of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     single element of the input sequence, or default ( TSource) if the sequence contains
////    //     no elements.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains more than one element.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource?> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.SingleOrDefaultWithoutPredicate, source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the only element of a sequence that satisfies a specified
////    //     condition or a default value if no such element exists; this method throws an
////    //     exception if more than one element satisfies the condition.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the single element of.
////    //
////    //   predicate:
////    //     A function to test an element for a condition.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     single element of the input sequence that satisfies the condition in predicate,
////    //     or default ( TSource ) if no such element is found.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or predicate is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     More than one element satisfies the condition in predicate.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource?> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(predicate, "predicate");
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.SingleOrDefaultWithPredicate, source, predicate, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the minimum value of a sequence.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 that contains the elements to determine the minimum
////    //     of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     minimum value in the sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource> MinAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.MinWithoutSelector, source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously invokes a projection function on each element of a sequence and
////    //     returns the minimum resulting value.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 that contains the elements to determine the minimum
////    //     of.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    //   TResult:
////    //     The type of the value returned by the function represented by selector.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     minimum value in the sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TResult> MinAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<TResult>>(QueryableMethods.MinWithSelector, source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously returns the maximum value of a sequence.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 that contains the elements to determine the maximum
////    //     of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     maximum value in the sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TSource> MaxAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<TSource, Task<TSource>>(QueryableMethods.MaxWithoutSelector, source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously invokes a projection function on each element of a sequence and
////    //     returns the maximum resulting value.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 that contains the elements to determine the maximum
////    //     of.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    //   TResult:
////    //     The type of the value returned by the function represented by selector.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     maximum value in the sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<TResult> MaxAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<TResult>>(QueryableMethods.MaxWithSelector, source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the sum of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the values in the sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<decimal> SumAsync(this IQueryable<decimal> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<decimal, Task<decimal>>(QueryableMethods.GetSumWithoutSelector(typeof(decimal)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the sum of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the values in the sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<decimal?> SumAsync(this IQueryable<decimal?> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<decimal?, Task<decimal?>>(QueryableMethods.GetSumWithoutSelector(typeof(decimal?)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of the sequence of values that is obtained by
////    //     invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<decimal> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<decimal>>(QueryableMethods.GetSumWithSelector(typeof(decimal)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of the sequence of values that is obtained by
////    //     invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<decimal?> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<decimal?>>(QueryableMethods.GetSumWithSelector(typeof(decimal?)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the sum of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the values in the sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<int> SumAsync(this IQueryable<int> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<int, Task<int>>(QueryableMethods.GetSumWithoutSelector(typeof(int)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the sum of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the values in the sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<int?> SumAsync(this IQueryable<int?> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<int?, Task<int?>>(QueryableMethods.GetSumWithoutSelector(typeof(int?)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of the sequence of values that is obtained by
////    //     invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<int> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<int>>(QueryableMethods.GetSumWithSelector(typeof(int)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of the sequence of values that is obtained by
////    //     invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<int?> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<int?>>(QueryableMethods.GetSumWithSelector(typeof(int?)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the sum of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the values in the sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<long> SumAsync(this IQueryable<long> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<long, Task<long>>(QueryableMethods.GetSumWithoutSelector(typeof(long)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the sum of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the values in the sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<long?> SumAsync(this IQueryable<long?> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<long?, Task<long?>>(QueryableMethods.GetSumWithoutSelector(typeof(long?)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of the sequence of values that is obtained by
////    //     invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<long> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<long>>(QueryableMethods.GetSumWithSelector(typeof(long)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of the sequence of values that is obtained by
////    //     invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<long?> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<long?>>(QueryableMethods.GetSumWithSelector(typeof(long?)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the sum of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the values in the sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double> SumAsync(this IQueryable<double> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<double, Task<double>>(QueryableMethods.GetSumWithoutSelector(typeof(double)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the sum of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the values in the sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double?> SumAsync(this IQueryable<double?> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<double?, Task<double?>>(QueryableMethods.GetSumWithoutSelector(typeof(double?)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of the sequence of values that is obtained by
////    //     invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<double>>(QueryableMethods.GetSumWithSelector(typeof(double)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of the sequence of values that is obtained by
////    //     invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double?> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<double?>>(QueryableMethods.GetSumWithSelector(typeof(double?)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the sum of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the values in the sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<float> SumAsync(this IQueryable<float> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<float, Task<float>>(QueryableMethods.GetSumWithoutSelector(typeof(float)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the sum of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the values in the sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<float?> SumAsync(this IQueryable<float?> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<float?, Task<float?>>(QueryableMethods.GetSumWithoutSelector(typeof(float?)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of the sequence of values that is obtained by
////    //     invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<float> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<float>>(QueryableMethods.GetSumWithSelector(typeof(float)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the sum of the sequence of values that is obtained by
////    //     invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     sum of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<float?> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<float?>>(QueryableMethods.GetSumWithSelector(typeof(float?)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the average of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the sequence of values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<decimal> AverageAsync(this IQueryable<decimal> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<decimal, Task<decimal>>(QueryableMethods.GetAverageWithoutSelector(typeof(decimal)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the average of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the sequence of values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<decimal?> AverageAsync(this IQueryable<decimal?> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<decimal?, Task<decimal?>>(QueryableMethods.GetAverageWithoutSelector(typeof(decimal?)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values that is obtained
////    //     by invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<decimal> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<decimal>>(QueryableMethods.GetAverageWithSelector(typeof(decimal)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values that is obtained
////    //     by invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<decimal?> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<decimal?>>(QueryableMethods.GetAverageWithSelector(typeof(decimal?)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the average of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the sequence of values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double> AverageAsync(this IQueryable<int> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<int, Task<double>>(QueryableMethods.GetAverageWithoutSelector(typeof(int)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the average of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the sequence of values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double?> AverageAsync(this IQueryable<int?> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<int?, Task<double?>>(QueryableMethods.GetAverageWithoutSelector(typeof(int?)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values that is obtained
////    //     by invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<double>>(QueryableMethods.GetAverageWithSelector(typeof(int)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values that is obtained
////    //     by invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double?> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<double?>>(QueryableMethods.GetAverageWithSelector(typeof(int?)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the average of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the sequence of values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double> AverageAsync(this IQueryable<long> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<long, Task<double>>(QueryableMethods.GetAverageWithoutSelector(typeof(long)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the average of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the sequence of values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double?> AverageAsync(this IQueryable<long?> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<long?, Task<double?>>(QueryableMethods.GetAverageWithoutSelector(typeof(long?)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values that is obtained
////    //     by invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<double>>(QueryableMethods.GetAverageWithSelector(typeof(long)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values that is obtained
////    //     by invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double?> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<double?>>(QueryableMethods.GetAverageWithSelector(typeof(long?)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the average of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the sequence of values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double> AverageAsync(this IQueryable<double> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<double, Task<double>>(QueryableMethods.GetAverageWithoutSelector(typeof(double)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the average of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the sequence of values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double?> AverageAsync(this IQueryable<double?> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<double?, Task<double?>>(QueryableMethods.GetAverageWithoutSelector(typeof(double?)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values that is obtained
////    //     by invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<double>>(QueryableMethods.GetAverageWithSelector(typeof(double)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values that is obtained
////    //     by invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<double?> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<double?>>(QueryableMethods.GetAverageWithSelector(typeof(double?)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the average of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the sequence of values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<float> AverageAsync(this IQueryable<float> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<float, Task<float>>(QueryableMethods.GetAverageWithoutSelector(typeof(float)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values to calculate the average of.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the sequence of values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<float?> AverageAsync(this IQueryable<float?> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<float?, Task<float?>>(QueryableMethods.GetAverageWithoutSelector(typeof(float?)), source, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values that is obtained
////    //     by invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.InvalidOperationException:
////    //     source contains no elements.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<float> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<float>>(QueryableMethods.GetAverageWithSelector(typeof(float)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously computes the average of a sequence of values that is obtained
////    //     by invoking a projection function on each element of the input sequence.
////    //
////    // 参数:
////    //   source:
////    //     A sequence of values of type TSource.
////    //
////    //   selector:
////    //     A projection function to apply to each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains the
////    //     average of the projected values.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or selector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<float?> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(selector, "selector");
////        return ExecuteAsync<TSource, Task<float?>>(QueryableMethods.GetAverageWithSelector(typeof(float?)), source, selector, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously determines whether a sequence contains a specified element by
////    //     using the default equality comparer.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to return the single element of.
////    //
////    //   item:
////    //     The object to locate in the sequence.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains true
////    //     if the input sequence contains the specified value; otherwise, false.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<bool> ContainsAsync<TSource>(this IQueryable<TSource> source, TSource item, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<TSource, Task<bool>>(QueryableMethods.Contains, source, Expression.Constant(item, typeof(TSource)), cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Asynchronously creates a System.Collections.Generic.List`1 from an System.Linq.IQueryable`1
////    //     by enumerating it asynchronously.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to create a list from.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains a
////    //     System.Collections.Generic.List`1 that contains elements from the input sequence.
////    //
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static async Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        List<TSource> list = new List<TSource>();
////        await foreach (TSource item in source.AsAsyncEnumerable().WithCancellation(cancellationToken).ConfigureAwait(continueOnCapturedContext: false))
////        {
////            list.Add(item);
////        }

////        return list;
////    }

////    //
////    // 摘要:
////    //     Asynchronously creates an array from an System.Linq.IQueryable`1 by enumerating
////    //     it asynchronously.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to create an array from.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains an
////    //     array that contains elements from the input sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static async Task<TSource[]> ToArrayAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return (await source.ToListAsync(cancellationToken).ConfigureAwait(continueOnCapturedContext: false)).ToArray();
////    }

////    //
////    // 摘要:
////    //     Asynchronously creates a System.Collections.Generic.HashSet`1 from an System.Linq.IQueryable`1
////    //     by enumerating it asynchronously.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to create a set from.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains a
////    //     System.Collections.Generic.HashSet`1 that contains elements from the input sequence.
////    //
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static async Task<HashSet<TSource>> ToHashSetAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        HashSet<TSource> set = new HashSet<TSource>();
////        await foreach (TSource item in source.AsAsyncEnumerable().WithCancellation(cancellationToken).ConfigureAwait(continueOnCapturedContext: false))
////        {
////            set.Add(item);
////        }

////        return set;
////    }

////    //
////    // 摘要:
////    //     Asynchronously creates a System.Collections.Generic.HashSet`1 from an System.Linq.IQueryable`1
////    //     by enumerating it asynchronously.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to create a set from.
////    //
////    //   comparer:
////    //     The System.Collections.Generic.IEqualityComparer`1 implementation to use when
////    //     comparing values in the set, or null to use the default System.Collections.Generic.EqualityComparer`1
////    //     implementation for the set type.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains a
////    //     System.Collections.Generic.HashSet`1 that contains elements from the input sequence.
////    //
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static async Task<HashSet<TSource>> ToHashSetAsync<TSource>(this IQueryable<TSource> source, IEqualityComparer<TSource>? comparer, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        HashSet<TSource> set = new HashSet<TSource>(comparer);
////        await foreach (TSource item in source.AsAsyncEnumerable().WithCancellation(cancellationToken).ConfigureAwait(continueOnCapturedContext: false))
////        {
////            set.Add(item);
////        }

////        return set;
////    }

////    //
////    // 摘要:
////    //     Specifies related entities to include in the query results. The navigation property
////    //     to be included is specified starting with the type of entity being queried (TEntity).
////    //     If you wish to include additional types based on the navigation properties of
////    //     the type being included, then chain a call to Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
////    //     after this call.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    //   navigationPropertyPath:
////    //     A lambda expression representing the navigation property to be included (t =>
////    //     t.Property1).
////    //
////    // 类型参数:
////    //   TEntity:
////    //     The type of entity being queried.
////    //
////    //   TProperty:
////    //     The type of the related entity to be included.
////    //
////    // 返回结果:
////    //     A new query with the related data included.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or navigationPropertyPath is null.
////    //
////    // 言论：
////    //     See Loading related entities for more information and examples.
////    public static IIncludableQueryable<TEntity, TProperty> Include<TEntity, TProperty>(this IQueryable<TEntity> source, Expression<Func<TEntity, TProperty>> navigationPropertyPath) where TEntity : class
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(navigationPropertyPath, "navigationPropertyPath");
////        return new IncludableQueryable<TEntity, TProperty>((IQueryable<TEntity>)((source.Provider is EntityQueryProvider) ? ((IQueryable<object>)source.Provider.CreateQuery<TEntity>(Expression.Call(null, IncludeMethodInfo.MakeGenericMethod(typeof(TEntity), typeof(TProperty)), new Expression[2]
////        {
////            source.Expression,
////            Expression.Quote(navigationPropertyPath)
////        }))) : ((IQueryable<object>)source)));
////    }

////    internal static IIncludableQueryable<TEntity, TProperty> NotQuiteInclude<TEntity, TProperty>(this IQueryable<TEntity> source, Expression<Func<TEntity, TProperty>> navigationPropertyPath) where TEntity : class
////    {
////        return new IncludableQueryable<TEntity, TProperty>((IQueryable<TEntity>)((source.Provider is EntityQueryProvider) ? ((IQueryable<object>)source.Provider.CreateQuery<TEntity>(Expression.Call(null, NotQuiteIncludeMethodInfo.MakeGenericMethod(typeof(TEntity), typeof(TProperty)), new Expression[2]
////        {
////            source.Expression,
////            Expression.Quote(navigationPropertyPath)
////        }))) : ((IQueryable<object>)source)));
////    }

////    //
////    // 摘要:
////    //     Specifies additional related data to be further included based on a related type
////    //     that was just included.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    //   navigationPropertyPath:
////    //     A lambda expression representing the navigation property to be included (t =>
////    //     t.Property1).
////    //
////    // 类型参数:
////    //   TEntity:
////    //     The type of entity being queried.
////    //
////    //   TPreviousProperty:
////    //     The type of the entity that was just included.
////    //
////    //   TProperty:
////    //     The type of the related entity to be included.
////    //
////    // 返回结果:
////    //     A new query with the related data included.
////    //
////    // 言论：
////    //     See Loading related entities for more information and examples.
////    public static IIncludableQueryable<TEntity, TProperty> ThenInclude<TEntity, TPreviousProperty, TProperty>(this IIncludableQueryable<TEntity, IEnumerable<TPreviousProperty>> source, Expression<Func<TPreviousProperty, TProperty>> navigationPropertyPath) where TEntity : class
////    {
////        object queryable;
////        if (!(source.Provider is EntityQueryProvider))
////        {
////            queryable = source;
////        }
////        else
////        {
////            queryable = source.Provider.CreateQuery<TEntity>(Expression.Call(null, ThenIncludeAfterEnumerableMethodInfo.MakeGenericMethod(typeof(TEntity), typeof(TPreviousProperty), typeof(TProperty)), new Expression[2]
////            {
////                source.Expression,
////                Expression.Quote(navigationPropertyPath)
////            }));
////        }

////        return new IncludableQueryable<TEntity, TProperty>((IQueryable<TEntity>)queryable);
////    }

////    //
////    // 摘要:
////    //     Specifies additional related data to be further included based on a related type
////    //     that was just included.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    //   navigationPropertyPath:
////    //     A lambda expression representing the navigation property to be included (t =>
////    //     t.Property1).
////    //
////    // 类型参数:
////    //   TEntity:
////    //     The type of entity being queried.
////    //
////    //   TPreviousProperty:
////    //     The type of the entity that was just included.
////    //
////    //   TProperty:
////    //     The type of the related entity to be included.
////    //
////    // 返回结果:
////    //     A new query with the related data included.
////    //
////    // 言论：
////    //     See Loading related entities for more information and examples.
////    public static IIncludableQueryable<TEntity, TProperty> ThenInclude<TEntity, TPreviousProperty, TProperty>(this IIncludableQueryable<TEntity, TPreviousProperty> source, Expression<Func<TPreviousProperty, TProperty>> navigationPropertyPath) where TEntity : class
////    {
////        object queryable;
////        if (!(source.Provider is EntityQueryProvider))
////        {
////            queryable = source;
////        }
////        else
////        {
////            queryable = source.Provider.CreateQuery<TEntity>(Expression.Call(null, ThenIncludeAfterReferenceMethodInfo.MakeGenericMethod(typeof(TEntity), typeof(TPreviousProperty), typeof(TProperty)), new Expression[2]
////            {
////                source.Expression,
////                Expression.Quote(navigationPropertyPath)
////            }));
////        }

////        return new IncludableQueryable<TEntity, TProperty>((IQueryable<TEntity>)queryable);
////    }

////    //
////    // 摘要:
////    //     Specifies related entities to include in the query results. The navigation property
////    //     to be included is specified starting with the type of entity being queried (TEntity).
////    //     Further navigation properties to be included can be appended, separated by the
////    //     '.' character.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    //   navigationPropertyPath:
////    //     A string of '.' separated navigation property names to be included.
////    //
////    // 类型参数:
////    //   TEntity:
////    //     The type of entity being queried.
////    //
////    // 返回结果:
////    //     A new query with the related data included.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or navigationPropertyPath is null.
////    //
////    //   T:System.ArgumentException:
////    //     navigationPropertyPath is empty or whitespace.
////    //
////    // 言论：
////    //     See Loading related entities for more information and examples.
////    public static IQueryable<TEntity> Include<TEntity>(this IQueryable<TEntity> source, [NotParameterized] string navigationPropertyPath) where TEntity : class
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotEmpty(navigationPropertyPath, "navigationPropertyPath");
////        if (!(source.Provider is EntityQueryProvider))
////        {
////            return source;
////        }

////        return source.Provider.CreateQuery<TEntity>(Expression.Call(null, StringIncludeMethodInfo.MakeGenericMethod(typeof(TEntity)), source.Expression, Expression.Constant(navigationPropertyPath)));
////    }

////    //
////    // 摘要:
////    //     Specifies that the current Entity Framework LINQ query should not have any model-level
////    //     eager loaded navigations applied.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    // 类型参数:
////    //   TEntity:
////    //     The type of entity being queried.
////    //
////    // 返回结果:
////    //     A new query that will not apply any model-level eager loaded navigations.
////    //
////    // 言论：
////    //     See Loading related entities for more information and examples.
////    public static IQueryable<TEntity> IgnoreAutoIncludes<TEntity>(this IQueryable<TEntity> source) where TEntity : class
////    {
////        if (!(source.Provider is EntityQueryProvider))
////        {
////            return source;
////        }

////        return source.Provider.CreateQuery<TEntity>(Expression.Call(null, IgnoreAutoIncludesMethodInfo.MakeGenericMethod(typeof(TEntity)), source.Expression));
////    }

////    //
////    // 摘要:
////    //     Specifies that the current Entity Framework LINQ query should not have any model-level
////    //     entity query filters applied.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    // 类型参数:
////    //   TEntity:
////    //     The type of entity being queried.
////    //
////    // 返回结果:
////    //     A new query that will not apply any model-level entity query filters.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    // 言论：
////    //     See EF Core query filters for more information and examples.
////    public static IQueryable<TEntity> IgnoreQueryFilters<TEntity>(this IQueryable<TEntity> source) where TEntity : class
////    {
////        if (!(source.Provider is EntityQueryProvider))
////        {
////            return source;
////        }

////        return source.Provider.CreateQuery<TEntity>(Expression.Call(null, IgnoreQueryFiltersMethodInfo.MakeGenericMethod(typeof(TEntity)), source.Expression));
////    }

////    //
////    // 摘要:
////    //     The change tracker will not track any of the entities that are returned from
////    //     a LINQ query. If the entity instances are modified, this will not be detected
////    //     by the change tracker and Microsoft.EntityFrameworkCore.DbContext.SaveChanges
////    //     will not persist those changes to the database.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    // 类型参数:
////    //   TEntity:
////    //     The type of entity being queried.
////    //
////    // 返回结果:
////    //     A new query where the result set will not be tracked by the context.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    // 言论：
////    //     Disabling change tracking is useful for read-only scenarios because it avoids
////    //     the overhead of setting up change tracking for each entity instance. You should
////    //     not disable change tracking if you want to manipulate entity instances and persist
////    //     those changes to the database using Microsoft.EntityFrameworkCore.DbContext.SaveChanges.
////    //
////    //
////    //     Identity resolution will not be performed. If an entity with a given key is in
////    //     different result in the result set then they will be different instances.
////    //
////    //     The default tracking behavior for queries can be controlled by Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior.
////    //
////    //
////    //     See No-tracking queries in EF Core for more information and examples.
////    public static IQueryable<TEntity> AsNoTracking<TEntity>(this IQueryable<TEntity> source) where TEntity : class
////    {
////        if (!(source.Provider is EntityQueryProvider))
////        {
////            return source;
////        }

////        return source.Provider.CreateQuery<TEntity>(Expression.Call(null, AsNoTrackingMethodInfo.MakeGenericMethod(typeof(TEntity)), source.Expression));
////    }

////    //
////    // 摘要:
////    //     The change tracker will not track any of the entities that are returned from
////    //     a LINQ query. If the entity instances are modified, this will not be detected
////    //     by the change tracker and Microsoft.EntityFrameworkCore.DbContext.SaveChanges
////    //     will not persist those changes to the database.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    // 类型参数:
////    //   TEntity:
////    //     The type of entity being queried.
////    //
////    // 返回结果:
////    //     A new query where the result set will not be tracked by the context.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    // 言论：
////    //     Disabling change tracking is useful for read-only scenarios because it avoids
////    //     the overhead of setting up change tracking for each entity instance. You should
////    //     not disable change tracking if you want to manipulate entity instances and persist
////    //     those changes to the database using Microsoft.EntityFrameworkCore.DbContext.SaveChanges.
////    //
////    //
////    //     Identity resolution will be performed to ensure that all occurrences of an entity
////    //     with a given key in the result set are represented by the same entity instance.
////    //
////    //
////    //     The default tracking behavior for queries can be controlled by Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior.
////    //
////    //
////    //     See No-tracking queries in EF Core for more information and examples.
////    public static IQueryable<TEntity> AsNoTrackingWithIdentityResolution<TEntity>(this IQueryable<TEntity> source) where TEntity : class
////    {
////        if (!(source.Provider is EntityQueryProvider))
////        {
////            return source;
////        }

////        return source.Provider.CreateQuery<TEntity>(Expression.Call(null, AsNoTrackingWithIdentityResolutionMethodInfo.MakeGenericMethod(typeof(TEntity)), source.Expression));
////    }

////    //
////    // 摘要:
////    //     Returns a new query where the change tracker will keep track of changes for all
////    //     entities that are returned. Any modification to the entity instances will be
////    //     detected and persisted to the database during Microsoft.EntityFrameworkCore.DbContext.SaveChanges.
////    //
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    // 类型参数:
////    //   TEntity:
////    //     The type of entity being queried.
////    //
////    // 返回结果:
////    //     A new query where the result set will be tracked by the context.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    // 言论：
////    //     The default tracking behavior for queries can be controlled by Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior.
////    //
////    //
////    //     See Tracking queries in EF Core for more information and examples.
////    public static IQueryable<TEntity> AsTracking<TEntity>(this IQueryable<TEntity> source) where TEntity : class
////    {
////        if (!(source.Provider is EntityQueryProvider))
////        {
////            return source;
////        }

////        return source.Provider.CreateQuery<TEntity>(Expression.Call(null, AsTrackingMethodInfo.MakeGenericMethod(typeof(TEntity)), source.Expression));
////    }

////    //
////    // 摘要:
////    //     Returns a new query where the change tracker will either keep track of changes
////    //     or not for all entities that are returned, depending on the value of the 'track'
////    //     parameter. When tracking, Any modification to the entity instances will be detected
////    //     and persisted to the database during Microsoft.EntityFrameworkCore.DbContext.SaveChanges.
////    //     When not tracking, if the entity instances are modified, this will not be detected
////    //     by the change tracker and Microsoft.EntityFrameworkCore.DbContext.SaveChanges
////    //     will not persist those changes to the database.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    //   track:
////    //     Indicates whether the query will track results or not.
////    //
////    // 类型参数:
////    //   TEntity:
////    //     The type of entity being queried.
////    //
////    // 返回结果:
////    //     A new query where the result set will be tracked by the context.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    // 言论：
////    //     Disabling change tracking is useful for read-only scenarios because it avoids
////    //     the overhead of setting up change tracking for each entity instance. You should
////    //     not disable change tracking if you want to manipulate entity instances and persist
////    //     those changes to the database using Microsoft.EntityFrameworkCore.DbContext.SaveChanges.
////    //
////    //
////    //     The default tracking behavior for queries can be controlled by Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior.
////    //
////    //
////    //     See Tracking queries in EF Core for more information and examples.
////    public static IQueryable<TEntity> AsTracking<TEntity>(this IQueryable<TEntity> source, QueryTrackingBehavior track) where TEntity : class
////    {
////        return track switch
////        {
////            QueryTrackingBehavior.TrackAll => source.AsTracking(),
////            QueryTrackingBehavior.NoTracking => source.AsNoTracking(),
////            QueryTrackingBehavior.NoTrackingWithIdentityResolution => source.AsNoTrackingWithIdentityResolution(),
////            _ => throw new ArgumentOutOfRangeException("track"),
////        };
////    }

////    //
////    // 摘要:
////    //     Adds a tag to the collection of tags associated with an EF LINQ query. Tags are
////    //     query annotations that can provide contextual tracing information at different
////    //     points in the query pipeline.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    //   tag:
////    //     The tag.
////    //
////    // 类型参数:
////    //   T:
////    //     The type of entity being queried.
////    //
////    // 返回结果:
////    //     A new query annotated with the given tag.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or tag is null.
////    //
////    //   T:System.ArgumentException:
////    //     tag is empty or whitespace.
////    //
////    // 言论：
////    //     See Tagging queries in EF Core for more information and examples.
////    public static IQueryable<T> TagWith<T>(this IQueryable<T> source, [NotParameterized] string tag)
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotEmpty(tag, "tag");
////        if (!(source.Provider is EntityQueryProvider))
////        {
////            return source;
////        }

////        return source.Provider.CreateQuery<T>(Expression.Call(null, TagWithMethodInfo.MakeGenericMethod(typeof(T)), source.Expression, Expression.Constant(tag)));
////    }

////    //
////    // 摘要:
////    //     Adds a tag to the collection of tags associated with an EF LINQ query with source
////    //     file name and line where method was called that can provide contextual tracing
////    //     information at different points in the query pipeline.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    //   filePath:
////    //     The file name where the method was called
////    //
////    //   lineNumber:
////    //     The file line number where the method was called
////    //
////    // 类型参数:
////    //   T:
////    //     The type of entity being queried.
////    //
////    // 返回结果:
////    //     A new query annotated with the given tag.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source
////    //
////    // 言论：
////    //     See Tagging queries in EF Core for more information and examples.
////    public static IQueryable<T> TagWithCallSite<T>(this IQueryable<T> source, [NotParameterized][CallerFilePath] string? filePath = null, [NotParameterized][CallerLineNumber] int lineNumber = 0)
////    {
////        if (!(source.Provider is EntityQueryProvider))
////        {
////            return source;
////        }

////        return source.Provider.CreateQuery<T>(Expression.Call(null, TagWithCallSiteMethodInfo.MakeGenericMethod(typeof(T)), source.Expression, Expression.Constant(filePath), Expression.Constant(lineNumber)));
////    }

////    //
////    // 摘要:
////    //     Enumerates the query. When using Entity Framework, this causes the results of
////    //     the query to be loaded into the associated context. This is equivalent to calling
////    //     ToList and then throwing away the list (without the overhead of actually creating
////    //     the list).
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    // 言论：
////    //     See LINQ queries in EF Core for more information and examples.
////    public static void Load<TSource>(this IQueryable<TSource> source)
////    {
////        using IEnumerator<TSource> enumerator = source.GetEnumerator();
////        while (enumerator.MoveNext())
////        {
////        }
////    }

////    //
////    // 摘要:
////    //     Asynchronously enumerates the query. When using Entity Framework, this causes
////    //     the results of the query to be loaded into the associated context. This is equivalent
////    //     to calling ToList and then throwing away the list (without the overhead of actually
////    //     creating the list).
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static async Task LoadAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        IAsyncEnumerator<TSource> enumerator = source.AsAsyncEnumerable().GetAsyncEnumerator(cancellationToken);
////        ConfiguredAsyncDisposable _ = enumerator.ConfigureAwait(continueOnCapturedContext: false);
////        try
////        {
////            while (await enumerator.MoveNextAsync().ConfigureAwait(continueOnCapturedContext: false))
////            {
////            }
////        }
////        finally
////        {
////            IAsyncDisposable asyncDisposable = _ as IAsyncDisposable;
////            if (asyncDisposable != null)
////            {
////                await asyncDisposable.DisposeAsync();
////            }
////        }
////    }

////    //
////    // 摘要:
////    //     Creates a System.Collections.Generic.Dictionary`2 from an System.Linq.IQueryable`1
////    //     by enumerating it asynchronously according to a specified key selector function.
////    //
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to create a System.Collections.Generic.Dictionary`2
////    //     from.
////    //
////    //   keySelector:
////    //     A function to extract a key from each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    //   TKey:
////    //     The type of the key returned by keySelector.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains a
////    //     System.Collections.Generic.Dictionary`2 that contains selected keys and values.
////    //
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or keySelector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken cancellationToken = default(CancellationToken)) where TKey : notnull
////    {
////        return source.ToDictionaryAsync(keySelector, (TSource e) => e, null, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Creates a System.Collections.Generic.Dictionary`2 from an System.Linq.IQueryable`1
////    //     by enumerating it asynchronously according to a specified key selector function
////    //     and a comparer.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to create a System.Collections.Generic.Dictionary`2
////    //     from.
////    //
////    //   keySelector:
////    //     A function to extract a key from each element.
////    //
////    //   comparer:
////    //     An System.Collections.Generic.IEqualityComparer`1 to compare keys.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    //   TKey:
////    //     The type of the key returned by keySelector.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains a
////    //     System.Collections.Generic.Dictionary`2 that contains selected keys and values.
////    //
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or keySelector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer, CancellationToken cancellationToken = default(CancellationToken)) where TKey : notnull
////    {
////        return source.ToDictionaryAsync(keySelector, (TSource e) => e, comparer, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Creates a System.Collections.Generic.Dictionary`2 from an System.Linq.IQueryable`1
////    //     by enumerating it asynchronously according to a specified key selector and an
////    //     element selector function.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to create a System.Collections.Generic.Dictionary`2
////    //     from.
////    //
////    //   keySelector:
////    //     A function to extract a key from each element.
////    //
////    //   elementSelector:
////    //     A transform function to produce a result element value from each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    //   TKey:
////    //     The type of the key returned by keySelector.
////    //
////    //   TElement:
////    //     The type of the value returned by elementSelector.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains a
////    //     System.Collections.Generic.Dictionary`2 that contains values of type TElement
////    //     selected from the input sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or keySelector or elementSelector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, CancellationToken cancellationToken = default(CancellationToken)) where TKey : notnull
////    {
////        return source.ToDictionaryAsync(keySelector, elementSelector, null, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Creates a System.Collections.Generic.Dictionary`2 from an System.Linq.IQueryable`1
////    //     by enumerating it asynchronously according to a specified key selector function,
////    //     a comparer, and an element selector function.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to create a System.Collections.Generic.Dictionary`2
////    //     from.
////    //
////    //   keySelector:
////    //     A function to extract a key from each element.
////    //
////    //   elementSelector:
////    //     A transform function to produce a result element value from each element.
////    //
////    //   comparer:
////    //     An System.Collections.Generic.IEqualityComparer`1 to compare keys.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    //   TKey:
////    //     The type of the key returned by keySelector.
////    //
////    //   TElement:
////    //     The type of the value returned by elementSelector.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation. The task result contains a
////    //     System.Collections.Generic.Dictionary`2 that contains values of type TElement
////    //     selected from the input sequence.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or keySelector or elementSelector is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static async Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey>? comparer, CancellationToken cancellationToken = default(CancellationToken)) where TKey : notnull
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(keySelector, "keySelector");
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(elementSelector, "elementSelector");
////        Dictionary<TKey, TElement> d = new Dictionary<TKey, TElement>(comparer);
////        await foreach (TSource item in source.AsAsyncEnumerable().WithCancellation(cancellationToken).ConfigureAwait(continueOnCapturedContext: false))
////        {
////            d.Add(keySelector(item), elementSelector(item));
////        }

////        return d;
////    }

////    //
////    // 摘要:
////    //     Asynchronously enumerates the query results and performs the specified action
////    //     on each element.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to enumerate.
////    //
////    //   action:
////    //     The action to perform on each element.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 类型参数:
////    //   T:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     A task that represents the asynchronous operation.
////    //
////    // 异常:
////    //   T:System.ArgumentNullException:
////    //     source or action is null.
////    //
////    //   T:System.OperationCanceledException:
////    //     If the System.Threading.CancellationToken is canceled.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static async Task ForEachAsync<T>(this IQueryable<T> source, Action<T> action, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        Microsoft.EntityFrameworkCore.Utilities.Check.NotNull(action, "action");
////        await foreach (T item in source.AsAsyncEnumerable().WithCancellation(cancellationToken).ConfigureAwait(continueOnCapturedContext: false))
////        {
////            action(item);
////        }
////    }

////    //
////    // 摘要:
////    //     Returns an System.Collections.Generic.IAsyncEnumerable`1 which can be enumerated
////    //     asynchronously.
////    //
////    // 参数:
////    //   source:
////    //     An System.Linq.IQueryable`1 to enumerate.
////    //
////    // 类型参数:
////    //   TSource:
////    //     The type of the elements of source.
////    //
////    // 返回结果:
////    //     The query results.
////    //
////    // 异常:
////    //   T:System.InvalidOperationException:
////    //     source is null.
////    //
////    //   T:System.ArgumentNullException:
////    //     source is not a System.Collections.Generic.IAsyncEnumerable`1.
////    //
////    // 言论：
////    //     Multiple active operations on the same context instance are not supported. Use
////    //     await to ensure that any asynchronous operations have completed before calling
////    //     another method on this context. See Avoiding DbContext threading issues for more
////    //     information and examples.
////    //
////    //     See Querying data with EF Core for more information and examples.
////    public static IAsyncEnumerable<TSource> AsAsyncEnumerable<TSource>(this IQueryable<TSource> source)
////    {
////        if (source is IAsyncEnumerable<TSource> result)
////        {
////            return result;
////        }

////        throw new InvalidOperationException(CoreStrings.IQueryableNotAsync(typeof(TSource)));
////    }

////    private static TResult ExecuteAsync<TSource, TResult>(MethodInfo operatorMethodInfo, IQueryable<TSource> source, Expression expression, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        if (source.Provider is IAsyncQueryProvider asyncQueryProvider)
////        {
////            if (operatorMethodInfo.IsGenericMethod)
////            {
////                operatorMethodInfo = ((operatorMethodInfo.GetGenericArguments().Length == 2) ? operatorMethodInfo.MakeGenericMethod(typeof(TSource), typeof(TResult).GetGenericArguments().Single()) : operatorMethodInfo.MakeGenericMethod(typeof(TSource)));
////            }

////            return asyncQueryProvider.ExecuteAsync<TResult>(Expression.Call(null, operatorMethodInfo, (expression != null) ? new Expression[2] { source.Expression, expression } : new Expression[1] { source.Expression }), cancellationToken);
////        }

////        throw new InvalidOperationException(CoreStrings.IQueryableProviderNotAsync);
////    }

////    private static TResult ExecuteAsync<TSource, TResult>(MethodInfo operatorMethodInfo, IQueryable<TSource> source, LambdaExpression expression, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<TSource, TResult>(operatorMethodInfo, source, Expression.Quote(expression), cancellationToken);
////    }

////    private static TResult ExecuteAsync<TSource, TResult>(MethodInfo operatorMethodInfo, IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        return ExecuteAsync<TSource, TResult>(operatorMethodInfo, source, (Expression)null, cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Deletes all database rows for the entity instances which match the LINQ query
////    //     from the database.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    // 返回结果:
////    //     The total number of rows deleted in the database.
////    //
////    // 言论：
////    //     This operation executes immediately against the database, rather than being deferred
////    //     until Microsoft.EntityFrameworkCore.DbContext.SaveChanges is called. It also
////    //     does not interact with the EF change tracker in any way: entity instances which
////    //     happen to be tracked when this operation is invoked aren't taken into account,
////    //     and aren't updated to reflect the changes.
////    //
////    //     See Executing bulk operations with EF Core for more information and examples.
////    public static int ExecuteDelete<TSource>(this IQueryable<TSource> source)
////    {
////        return source.Provider.Execute<int>(Expression.Call(ExecuteDeleteMethodInfo.MakeGenericMethod(typeof(TSource)), source.Expression));
////    }

////    //
////    // 摘要:
////    //     Asynchronously deletes database rows for the entity instances which match the
////    //     LINQ query from the database.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     The total number of rows deleted in the database.
////    //
////    // 言论：
////    //     This operation executes immediately against the database, rather than being deferred
////    //     until Microsoft.EntityFrameworkCore.DbContext.SaveChanges is called. It also
////    //     does not interact with the EF change tracker in any way: entity instances which
////    //     happen to be tracked when this operation is invoked aren't taken into account,
////    //     and aren't updated to reflect the changes.
////    //
////    //     See Executing bulk operations with EF Core for more information and examples.
////    public static Task<int> ExecuteDeleteAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        if (!(source.Provider is IAsyncQueryProvider asyncQueryProvider))
////        {
////            throw new InvalidOperationException(CoreStrings.IQueryableProviderNotAsync);
////        }

////        return asyncQueryProvider.ExecuteAsync<Task<int>>(Expression.Call(ExecuteDeleteMethodInfo.MakeGenericMethod(typeof(TSource)), source.Expression), cancellationToken);
////    }

////    //
////    // 摘要:
////    //     Updates all database rows for the entity instances which match the LINQ query
////    //     from the database.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    //   setPropertyCalls:
////    //     A collection of set property statements specifying properties to update.
////    //
////    // 返回结果:
////    //     The total number of rows updated in the database.
////    //
////    // 言论：
////    //     This operation executes immediately against the database, rather than being deferred
////    //     until Microsoft.EntityFrameworkCore.DbContext.SaveChanges is called. It also
////    //     does not interact with the EF change tracker in any way: entity instances which
////    //     happen to be tracked when this operation is invoked aren't taken into account,
////    //     and aren't updated to reflect the changes.
////    //
////    //     See Executing bulk operations with EF Core for more information and examples.
////    public static int ExecuteUpdate<TSource>(this IQueryable<TSource> source, Expression<Func<SetPropertyCalls<TSource>, SetPropertyCalls<TSource>>> setPropertyCalls)
////    {
////        return source.Provider.Execute<int>(Expression.Call(ExecuteUpdateMethodInfo.MakeGenericMethod(typeof(TSource)), source.Expression, setPropertyCalls));
////    }

////    //
////    // 摘要:
////    //     Asynchronously updates database rows for the entity instances which match the
////    //     LINQ query from the database.
////    //
////    // 参数:
////    //   source:
////    //     The source query.
////    //
////    //   setPropertyCalls:
////    //     A collection of set property statements specifying properties to update.
////    //
////    //   cancellationToken:
////    //     A System.Threading.CancellationToken to observe while waiting for the task to
////    //     complete.
////    //
////    // 返回结果:
////    //     The total number of rows updated in the database.
////    //
////    // 言论：
////    //     This operation executes immediately against the database, rather than being deferred
////    //     until Microsoft.EntityFrameworkCore.DbContext.SaveChanges is called. It also
////    //     does not interact with the EF change tracker in any way: entity instances which
////    //     happen to be tracked when this operation is invoked aren't taken into account,
////    //     and aren't updated to reflect the changes.
////    //
////    //     See Executing bulk operations with EF Core for more information and examples.
////    public static Task<int> ExecuteUpdateAsync<TSource>(this IQueryable<TSource> source, Expression<Func<SetPropertyCalls<TSource>, SetPropertyCalls<TSource>>> setPropertyCalls, CancellationToken cancellationToken = default(CancellationToken))
////    {
////        if (!(source.Provider is IAsyncQueryProvider asyncQueryProvider))
////        {
////            throw new InvalidOperationException(CoreStrings.IQueryableProviderNotAsync);
////        }

////        return asyncQueryProvider.ExecuteAsync<Task<int>>(Expression.Call(ExecuteUpdateMethodInfo.MakeGenericMethod(typeof(TSource)), source.Expression, setPropertyCalls), cancellationToken);
////    }
////}
////#if false // 反编译日志
////缓存中的 183 项
////------------------
////解析: "System.Runtime, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Runtime, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Runtime.dll"
////------------------
////解析: "System.Collections, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Collections, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Collections.dll"
////------------------
////解析: "System.Linq.Expressions, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Linq.Expressions, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Linq.Expressions.dll"
////------------------
////解析: "System.Transactions.Local, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51"
////找到单个程序集: "System.Transactions.Local, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Transactions.Local.dll"
////------------------
////解析: "Microsoft.Extensions.DependencyInjection.Abstractions, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////找到单个程序集: "Microsoft.Extensions.DependencyInjection.Abstractions, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////从以下位置加载: "C:\Users\11413\.nuget\packages\microsoft.extensions.dependencyinjection.abstractions\9.0.4\lib\net9.0\Microsoft.Extensions.DependencyInjection.Abstractions.dll"
////------------------
////解析: "System.ComponentModel, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.ComponentModel, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.ComponentModel.dll"
////------------------
////解析: "System.Collections.Immutable, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Collections.Immutable, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Collections.Immutable.dll"
////------------------
////解析: "Microsoft.Extensions.Logging.Abstractions, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////找到单个程序集: "Microsoft.Extensions.Logging.Abstractions, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////从以下位置加载: "C:\Users\11413\.nuget\packages\microsoft.extensions.logging.abstractions\9.0.4\lib\net9.0\Microsoft.Extensions.Logging.Abstractions.dll"
////------------------
////解析: "Microsoft.Extensions.Caching.Abstractions, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////找到单个程序集: "Microsoft.Extensions.Caching.Abstractions, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////从以下位置加载: "C:\Users\11413\.nuget\packages\microsoft.extensions.caching.abstractions\9.0.4\lib\net9.0\Microsoft.Extensions.Caching.Abstractions.dll"
////------------------
////解析: "System.ComponentModel.TypeConverter, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.ComponentModel.TypeConverter, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.ComponentModel.TypeConverter.dll"
////------------------
////解析: "Microsoft.EntityFrameworkCore.Abstractions, Version=9.0.4.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////找到单个程序集: "Microsoft.EntityFrameworkCore.Abstractions, Version=9.0.4.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////从以下位置加载: "C:\Users\11413\.nuget\packages\microsoft.entityframeworkcore.abstractions\9.0.4\lib\net8.0\Microsoft.EntityFrameworkCore.Abstractions.dll"
////------------------
////解析: "System.Linq, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Linq, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Linq.dll"
////------------------
////解析: "System.Threading, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Threading, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Threading.dll"
////------------------
////解析: "System.Collections.Concurrent, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Collections.Concurrent, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Collections.Concurrent.dll"
////------------------
////解析: "System.Net.Primitives, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Net.Primitives, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Net.Primitives.dll"
////------------------
////解析: "System.Net.NetworkInformation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Net.NetworkInformation, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Net.NetworkInformation.dll"
////------------------
////解析: "System.Text.Json, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51"
////找到单个程序集: "System.Text.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Text.Json.dll"
////------------------
////解析: "System.ComponentModel.Annotations, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.ComponentModel.Annotations, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.ComponentModel.Annotations.dll"
////------------------
////解析: "System.Diagnostics.Tracing, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Diagnostics.Tracing, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Diagnostics.Tracing.dll"
////------------------
////解析: "System.Diagnostics.DiagnosticSource, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51"
////找到单个程序集: "System.Diagnostics.DiagnosticSource, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Diagnostics.DiagnosticSource.dll"
////------------------
////解析: "Microsoft.Extensions.DependencyInjection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////找到单个程序集: "Microsoft.Extensions.DependencyInjection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////从以下位置加载: "C:\Users\11413\.nuget\packages\microsoft.extensions.dependencyinjection\9.0.4\lib\net9.0\Microsoft.Extensions.DependencyInjection.dll"
////------------------
////解析: "System.Runtime.Numerics, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Runtime.Numerics, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Runtime.Numerics.dll"
////------------------
////解析: "System.ObjectModel, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.ObjectModel, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.ObjectModel.dll"
////------------------
////解析: "System.Runtime.InteropServices, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Runtime.InteropServices, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Runtime.InteropServices.dll"
////------------------
////解析: "System.Memory, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51"
////找到单个程序集: "System.Memory, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Memory.dll"
////------------------
////解析: "System.Threading.Thread, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Threading.Thread, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Threading.Thread.dll"
////------------------
////解析: "System.Linq.Queryable, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Linq.Queryable, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Linq.Queryable.dll"
////------------------
////解析: "Microsoft.Extensions.Logging, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////找到单个程序集: "Microsoft.Extensions.Logging, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////从以下位置加载: "C:\Users\11413\.nuget\packages\microsoft.extensions.logging\9.0.4\lib\net9.0\Microsoft.Extensions.Logging.dll"
////------------------
////解析: "Microsoft.Extensions.Caching.Memory, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////找到单个程序集: "Microsoft.Extensions.Caching.Memory, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////从以下位置加载: "C:\Users\11413\.nuget\packages\microsoft.extensions.caching.memory\9.0.4\lib\net9.0\Microsoft.Extensions.Caching.Memory.dll"
////------------------
////解析: "Microsoft.Extensions.Options, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////找到单个程序集: "Microsoft.Extensions.Options, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"
////从以下位置加载: "C:\Users\11413\.nuget\packages\microsoft.extensions.options\9.0.4\lib\net9.0\Microsoft.Extensions.Options.dll"
////------------------
////解析: "System.Runtime, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.Runtime, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Runtime.dll"
////------------------
////解析: "System.ComponentModel.Primitives, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.ComponentModel.Primitives, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.ComponentModel.Primitives.dll"
////------------------
////解析: "System.ObjectModel, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////找到单个程序集: "System.ObjectModel, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.ObjectModel.dll"
////------------------
////解析: "System.Runtime.CompilerServices.Unsafe, Version=8.0.0.0, Culture=neutral, PublicKeyToken=null"
////找到单个程序集: "System.Runtime.CompilerServices.Unsafe, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
////警告: 版本不匹配。应为: "8.0.0.0"，实际为: "9.0.0.0"
////从以下位置加载: "C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\9.0.3\ref\net9.0\System.Runtime.CompilerServices.Unsafe.dll"
////#endif
